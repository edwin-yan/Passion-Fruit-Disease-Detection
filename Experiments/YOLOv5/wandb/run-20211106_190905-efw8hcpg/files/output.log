                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Focus                     [3, 32, 3]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     20672  models.common.Bottleneck                [64, 64]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  3    161152  models.common.BottleneckCSP             [128, 128, 3]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    641792  models.common.BottleneckCSP             [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1    656896  models.common.SPP                       [512, 512, [5, 9, 13]]
  9                -1  2   1905152  models.common.BottleneckCSP             [512, 512, 2]
 10                -1  1   1248768  models.common.BottleneckCSP             [512, 512, 1, False]
 11                -1  1        25  torch.nn.modules.conv.Conv2d            [24, 1, 1, 0]
 12                -2  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 13           [-1, 6]  1         0  models.common.Concat                    [1]
 14                -1  1    197120  models.common.Conv                      [768, 256, 1, 1]
 15                -1  1    313088  models.common.BottleneckCSP             [256, 256, 1, False]
 16                -1  1        25  torch.nn.modules.conv.Conv2d            [24, 1, 1, 0]
 17                -2  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 18           [-1, 4]  1         0  models.common.Concat                    [1]
 19                -1  1     49408  models.common.Conv                      [384, 128, 1, 1]
 20                -1  1     78720  models.common.BottleneckCSP             [128, 128, 1, False]
 21                -1  1        25  torch.nn.modules.conv.Conv2d            [24, 1, 1, 0]
 22                []  1         0  models.yolo.Detect                      [3, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], []]
Traceback (most recent call last):
  File "/home/bdina/Desktop/jhu_dnn/Passion-Fruit-Disease-Detection/Experiments/YOLOv5/train.py", line 627, in <module>
    main(opt)
  File "/home/bdina/Desktop/jhu_dnn/Passion-Fruit-Disease-Detection/Experiments/YOLOv5/train.py", line 524, in main
    train(opt.hyp, opt, device, callbacks)
  File "/home/bdina/Desktop/jhu_dnn/Passion-Fruit-Disease-Detection/Experiments/YOLOv5/train.py", line 118, in train
    model = Model(cfg or ckpt['model'].yaml, ch=3, nc=nc, anchors=hyp.get('anchors')).to(device)  # create
  File "/home/bdina/Desktop/jhu_dnn/Passion-Fruit-Disease-Detection/Experiments/YOLOv5/models/yolo.py", line 112, in __init__
    m.stride = torch.tensor([s / x.shape[-2] for x in self.forward(torch.zeros(1, ch, s, s))])  # forward
  File "/home/bdina/Desktop/jhu_dnn/Passion-Fruit-Disease-Detection/Experiments/YOLOv5/models/yolo.py", line 126, in forward
    return self._forward_once(x, profile, visualize)  # single-scale inference, train
  File "/home/bdina/Desktop/jhu_dnn/Passion-Fruit-Disease-Detection/Experiments/YOLOv5/models/yolo.py", line 149, in _forward_once
    x = m(x)  # run
  File "/home/bdina/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/bdina/miniconda3/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 446, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/bdina/miniconda3/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 442, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
RuntimeError: non-positive stride is not supported